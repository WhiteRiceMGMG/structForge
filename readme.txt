使用について，
todoリストを作りたい
ファイルはメインcとtodo.c
初期は「何もデータがありませんと表示」
→データ数を扱う変数が欲しい
todoデータベースを構造体にしたい
データベースの内容は　名前　職業　出身　性別　くらいにする
どんな関数作ろうか
データベースやで，ユーザーの追加，ユーザーの削除，ユーザの検索など
→データベースで操作を管理する関数が欲しい
→追加，削除，検索の関数がほしい
出力する用の関数がほしい，


仕様書

作成する関数
　操作管理
　ユーザーの追加
　ユーザーの削除
　ユーザの検索
　データベース一覧表示
　出力用関数

操作管理関数
　引数　1,2,3,4,5などの数字
　戻り値　構造体　引数に応じてその関数へ流れる．
　　　

ユーザの追加関数
　引数　構造体
　返り値　構造体　出力用関数へ

ユーザの削除
　引数　構造体
　返り値　構造体　出力用関数へ

ユーザの検索
　引数　構造体
　返り値　構造体　出力用関数へ

データベース一覧表示
　引数　構造体
　返り値　構造体　出力関数へ

出力用関数
　引数　構造体
　返り値　なし

/*
それぞれの関数でそれぞれのポインタを定義して，アドレスさえ一致させれば一応構造体を動かせるけど，
一番わかりやすいのはそれぞれの関数で使える共通のポインタを作っといて，それを操作すればいい
+----------------------+
| Database db          | ← 実体（1個しかない）
+----------------------+
         ↑
    &db / ポインタ
         ↓
+-------------------------------+
| Database* ptr                | ← 共通のポインタ
+-------------------------------+
         ↓          ↓         ↓
+----------+   +----------+  +----------+
| add_user |   | del_user |  | print_db |
+----------+   +----------+  +----------+
     ↑             ↑              ↑
     |             |              |
     +-------------+--------------+
            共通のポインタを渡す

構造体をヘッダーに定義しただけではダメ？実体化はどこで？何回？ポインタ渡しの意味は？
　ヘッダーは「設計図（型の定義）」だけ。実体ではない。
　実体化（Database db;）は「箱を作る」こと → メモリ上に構造体ができる。
　実体化は1回だけにして、各関数にはポインタで渡すのが基本。
　static を使えば関数内で一度だけ実体化して、以降も使い回せる。
　実体が複数あると、それぞれ別物なので、変更が「消えたように見える」こともある。

構造体で初期化はできない．宣言だけ．
*/